// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace VeduBoxUnitTest.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Instructor")]
    public partial class InstructorFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Instructor.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Instructor", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("1_instructor_add_live")]
        public virtual void _1_İnstructor_Add_Live()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1_instructor_add_live", null, tagsOfScenario, argumentsOfScenario);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 testRunner.Given("Open Kurumsal Login Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
 testRunner.Given("Login as \"instructor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.Given("instructor checks live is exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table53.AddRow(new string[] {
                            "course_name",
                            "defaultCourse1"});
                table53.AddRow(new string[] {
                            "meetingType",
                            "pro"});
                table53.AddRow(new string[] {
                            "title",
                            "deneme"});
                table53.AddRow(new string[] {
                            "hour",
                            "18"});
                table53.AddRow(new string[] {
                            "min",
                            "00"});
                table53.AddRow(new string[] {
                            "timezone",
                            "Turkey Time (GMT+3:00)"});
                table53.AddRow(new string[] {
                            "duration",
                            "120"});
                table53.AddRow(new string[] {
                            "registrationLimit",
                            "50"});
                table53.AddRow(new string[] {
                            "description",
                            "Deneme 123"});
#line 7
 testRunner.Given("instructor adds new live with", ((string)(null)), table53, "Given ");
#line hidden
#line 18
 testRunner.Then("Delete LIVE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("2_instructor_live_start")]
        public virtual void _2_İnstructor_Live_Start()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("2_instructor_live_start", null, tagsOfScenario, argumentsOfScenario);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 21
 testRunner.Given("Open Kurumsal Login Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 22
 testRunner.Given("Login as \"instructor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 23
 testRunner.Given("instructor checks live is exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table54.AddRow(new string[] {
                            "course_name",
                            "defaultCourse1"});
                table54.AddRow(new string[] {
                            "meetingType",
                            "pro"});
                table54.AddRow(new string[] {
                            "title",
                            "deneme"});
                table54.AddRow(new string[] {
                            "hour",
                            "18"});
                table54.AddRow(new string[] {
                            "min",
                            "00"});
                table54.AddRow(new string[] {
                            "timezone",
                            "Turkey Time (GMT+3:00)"});
                table54.AddRow(new string[] {
                            "duration",
                            "120"});
                table54.AddRow(new string[] {
                            "registrationLimit",
                            "50"});
                table54.AddRow(new string[] {
                            "description",
                            "Deneme 123"});
#line 24
 testRunner.Given("instructor adds new live with", ((string)(null)), table54, "Given ");
#line hidden
#line 35
 testRunner.Then("verify start live and delete live with", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("3_instructor_add_student")]
        public virtual void _3_İnstructor_Add_Student()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("3_instructor_add_student", null, tagsOfScenario, argumentsOfScenario);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 38
 testRunner.Given("Open Kurumsal Login Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 39
 testRunner.Given("Login as \"instructor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table55.AddRow(new string[] {
                            "email",
                            "anil_instructor_student@anil.com"});
#line 40
 testRunner.Given("instructor checks student is exist", ((string)(null)), table55, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table56.AddRow(new string[] {
                            "firstName",
                            "deneme_user_first"});
                table56.AddRow(new string[] {
                            "lastName",
                            "deneme_user_last"});
                table56.AddRow(new string[] {
                            "branch",
                            "defaultBranch1"});
                table56.AddRow(new string[] {
                            "email",
                            "anil_instructor_student@anil.com"});
                table56.AddRow(new string[] {
                            "userName",
                            "admin_deneme"});
                table56.AddRow(new string[] {
                            "password",
                            "admin_deneme_pass"});
                table56.AddRow(new string[] {
                            "catalog",
                            "defaultCatalog1"});
#line 43
 testRunner.Given("instructor adds new student with", ((string)(null)), table56, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table57.AddRow(new string[] {
                            "email",
                            "anil_instructor_student@anil.com"});
#line 52
 testRunner.Then("instructor delete student", ((string)(null)), table57, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("4_instructor_add_course")]
        public virtual void _4_İnstructor_Add_Course()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("4_instructor_add_course", null, tagsOfScenario, argumentsOfScenario);
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 57
 testRunner.Given("Open Kurumsal Login Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 58
 testRunner.Given("Login as \"instructor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table58.AddRow(new string[] {
                            "name",
                            "anil_vedubox_course_instructor"});
#line 59
 testRunner.Given("instructor checks course is exist", ((string)(null)), table58, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table59.AddRow(new string[] {
                            "name",
                            "anil_vedubox_course_instructor"});
                table59.AddRow(new string[] {
                            "category",
                            "defaultCategory1"});
#line 62
 testRunner.Given("instructor adds new course with", ((string)(null)), table59, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table60.AddRow(new string[] {
                            "name",
                            "anil_vedubox_course_instructor"});
#line 66
 testRunner.Then("instructor delete course", ((string)(null)), table60, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("5_instructor_add_subject")]
        public virtual void _5_İnstructor_Add_Subject()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("5_instructor_add_subject", null, tagsOfScenario, argumentsOfScenario);
#line 70
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 71
 testRunner.Given("Open Kurumsal Login Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 72
 testRunner.Given("Login as \"instructor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table61.AddRow(new string[] {
                            "name",
                            "anil_vedubox_course_instructor"});
#line 73
 testRunner.Given("instructor checks course is exist", ((string)(null)), table61, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table62.AddRow(new string[] {
                            "name",
                            "anil_vedubox_course_instructor"});
                table62.AddRow(new string[] {
                            "category",
                            "defaultCategory1"});
#line 76
 testRunner.Given("instructor adds new course with", ((string)(null)), table62, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table63.AddRow(new string[] {
                            "name",
                            "anil_vedubox_course_instructor"});
                table63.AddRow(new string[] {
                            "title",
                            "hello world"});
#line 80
 testRunner.Given("instructor adds subject with", ((string)(null)), table63, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table64.AddRow(new string[] {
                            "name",
                            "anil_vedubox_course_instructor"});
#line 84
 testRunner.Then("instructor delete course", ((string)(null)), table64, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("6_instructor_add_webinar_join_webinar")]
        public virtual void _6_İnstructor_Add_Webinar_Join_Webinar()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("6_instructor_add_webinar_join_webinar", null, tagsOfScenario, argumentsOfScenario);
#line 88
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 89
 testRunner.Given("Open Kurumsal Login Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 90
 testRunner.Given("Login as \"instructor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 91
 testRunner.Given("instructor checks live is exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table65.AddRow(new string[] {
                            "course_name",
                            "defaultCourse1"});
                table65.AddRow(new string[] {
                            "meetingType",
                            "webinar"});
                table65.AddRow(new string[] {
                            "title",
                            "deneme"});
                table65.AddRow(new string[] {
                            "hour",
                            "18"});
                table65.AddRow(new string[] {
                            "min",
                            "00"});
                table65.AddRow(new string[] {
                            "timezone",
                            "Turkey Time (GMT+3:00)"});
                table65.AddRow(new string[] {
                            "duration",
                            "120"});
                table65.AddRow(new string[] {
                            "registrationLimit",
                            "50"});
                table65.AddRow(new string[] {
                            "description",
                            "Deneme 123"});
#line 92
 testRunner.Given("instructor adds new webinar with", ((string)(null)), table65, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table66.AddRow(new string[] {
                            "firstName",
                            "Lorem"});
                table66.AddRow(new string[] {
                            "lastName",
                            "Ipsum"});
                table66.AddRow(new string[] {
                            "phone",
                            "123456789012"});
                table66.AddRow(new string[] {
                            "email",
                            "lorem@ipsum.com"});
#line 103
 testRunner.Then("instructor copies webinar URL with", ((string)(null)), table66, "Then ");
#line hidden
#line 109
 testRunner.Given("Open Kurumsal Login Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 110
 testRunner.Given("Login as \"instructor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 111
 testRunner.Then("instructor deletes webinar with", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("7_instructor_add_content_as_document")]
        public virtual void _7_İnstructor_Add_Content_As_Document()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("7_instructor_add_content_as_document", null, tagsOfScenario, argumentsOfScenario);
#line 113
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 114
 testRunner.Given("Open Kurumsal Login Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 115
 testRunner.Given("Login as \"instructor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table67.AddRow(new string[] {
                            "name",
                            "anil_vedubox_course"});
#line 116
 testRunner.Given("instructor checks course is exist", ((string)(null)), table67, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table68.AddRow(new string[] {
                            "name",
                            "anil_vedubox_course"});
                table68.AddRow(new string[] {
                            "category",
                            "defaultCategory1"});
#line 119
 testRunner.Given("instructor adds new course with", ((string)(null)), table68, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table69.AddRow(new string[] {
                            "course",
                            "anil_vedubox_course"});
                table69.AddRow(new string[] {
                            "title",
                            "anil_vedubox_subject"});
#line 123
 testRunner.Given("instructor adds subject with", ((string)(null)), table69, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table70.AddRow(new string[] {
                            "course",
                            "anil_vedubox_course"});
                table70.AddRow(new string[] {
                            "title",
                            "anil_vedubox_file_to_subject"});
                table70.AddRow(new string[] {
                            "desc",
                            "anil_vedubox_file_desc"});
#line 127
 testRunner.Given("instructor adds file source with", ((string)(null)), table70, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table71.AddRow(new string[] {
                            "name",
                            "anil_vedubox_course"});
#line 132
 testRunner.Then("instructor delete course", ((string)(null)), table71, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("8_instrcutor_add_content_as_video")]
        public virtual void _8_İnstrcutor_Add_Content_As_Video()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("8_instrcutor_add_content_as_video", null, tagsOfScenario, argumentsOfScenario);
#line 136
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 137
 testRunner.Given("Open Kurumsal Login Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 138
 testRunner.Given("Login as \"instructor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table72.AddRow(new string[] {
                            "name",
                            "anil_vedubox_course"});
#line 139
 testRunner.Given("instructor checks course is exist", ((string)(null)), table72, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table73.AddRow(new string[] {
                            "name",
                            "anil_vedubox_course"});
                table73.AddRow(new string[] {
                            "category",
                            "defaultCategory1"});
#line 142
 testRunner.Given("instructor adds new course with", ((string)(null)), table73, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table74.AddRow(new string[] {
                            "course",
                            "anil_vedubox_course"});
                table74.AddRow(new string[] {
                            "title",
                            "anil_vedubox_subject"});
#line 146
 testRunner.Given("instructor adds subject with", ((string)(null)), table74, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table75.AddRow(new string[] {
                            "course",
                            "anil_vedubox_course"});
                table75.AddRow(new string[] {
                            "title",
                            "anil_vedubox_video_to_subject"});
                table75.AddRow(new string[] {
                            "desc",
                            "anil_vedubox_video_desc"});
#line 150
 testRunner.Given("instructor adds video source with", ((string)(null)), table75, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table76.AddRow(new string[] {
                            "name",
                            "anil_vedubox_course"});
#line 155
 testRunner.Then("instructor delete course", ((string)(null)), table76, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("9_instructor_add_content_as_video_with_vimeo")]
        public virtual void _9_İnstructor_Add_Content_As_Video_With_Vimeo()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("9_instructor_add_content_as_video_with_vimeo", null, tagsOfScenario, argumentsOfScenario);
#line 159
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 160
 testRunner.Given("Open Kurumsal Login Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 161
 testRunner.Given("Login as \"instructor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table77.AddRow(new string[] {
                            "name",
                            "anil_vedubox_course"});
#line 162
 testRunner.Given("instructor checks course is exist", ((string)(null)), table77, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table78.AddRow(new string[] {
                            "name",
                            "anil_vedubox_course"});
                table78.AddRow(new string[] {
                            "category",
                            "defaultCategory1"});
#line 165
 testRunner.Given("instructor adds new course with", ((string)(null)), table78, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table79.AddRow(new string[] {
                            "course",
                            "anil_vedubox_course"});
                table79.AddRow(new string[] {
                            "title",
                            "anil_vedubox_subject"});
#line 169
 testRunner.Given("instructor adds subject with", ((string)(null)), table79, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table80.AddRow(new string[] {
                            "course",
                            "anil_vedubox_course"});
                table80.AddRow(new string[] {
                            "title",
                            "anil_vedubox_video_to_subject_vimeo_id"});
                table80.AddRow(new string[] {
                            "desc",
                            "anil_vedubox_video_desc"});
                table80.AddRow(new string[] {
                            "id",
                            "444883013"});
#line 173
 testRunner.Given("instructor adds video with vimeo", ((string)(null)), table80, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table81.AddRow(new string[] {
                            "name",
                            "anil_vedubox_course"});
#line 179
 testRunner.Then("instructor delete course", ((string)(null)), table81, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("10_instructor_add_content_as_link")]
        public virtual void _10_İnstructor_Add_Content_As_Link()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("10_instructor_add_content_as_link", null, tagsOfScenario, argumentsOfScenario);
#line 183
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 184
 testRunner.Given("Open Kurumsal Login Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 185
 testRunner.Given("Login as \"instructor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table82.AddRow(new string[] {
                            "name",
                            "anil_vedubox_course"});
#line 186
 testRunner.Given("instructor checks course is exist", ((string)(null)), table82, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table83.AddRow(new string[] {
                            "name",
                            "anil_vedubox_course"});
                table83.AddRow(new string[] {
                            "category",
                            "defaultCategory1"});
#line 189
 testRunner.Given("instructor adds new course with", ((string)(null)), table83, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table84.AddRow(new string[] {
                            "course",
                            "anil_vedubox_course"});
                table84.AddRow(new string[] {
                            "title",
                            "anil_vedubox_subject"});
#line 193
 testRunner.Given("instructor adds subject with", ((string)(null)), table84, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table85.AddRow(new string[] {
                            "course",
                            "anil_vedubox_course"});
                table85.AddRow(new string[] {
                            "title",
                            "anil_vedubox_course_content_as_link_title"});
                table85.AddRow(new string[] {
                            "desc",
                            "anil_vedubox_course_content_as_link_desc"});
                table85.AddRow(new string[] {
                            "link",
                            "https://mail.google.com/mail/u/1/#inbox"});
#line 197
 testRunner.Given("instructor adds content as link", ((string)(null)), table85, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table86.AddRow(new string[] {
                            "name",
                            "anil_vedubox_course"});
#line 203
 testRunner.Then("instructor delete course", ((string)(null)), table86, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("11_instructor_add_content_as_embed_code")]
        public virtual void _11_İnstructor_Add_Content_As_Embed_Code()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("11_instructor_add_content_as_embed_code", null, tagsOfScenario, argumentsOfScenario);
#line 207
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 208
 testRunner.Given("Open Kurumsal Login Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 209
 testRunner.Given("Login as \"instructor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table87.AddRow(new string[] {
                            "name",
                            "anil_vedubox_course"});
#line 210
 testRunner.Given("instructor checks course is exist", ((string)(null)), table87, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table88.AddRow(new string[] {
                            "name",
                            "anil_vedubox_course"});
                table88.AddRow(new string[] {
                            "category",
                            "defaultCategory1"});
#line 213
 testRunner.Given("instructor adds new course with", ((string)(null)), table88, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table89.AddRow(new string[] {
                            "course",
                            "anil_vedubox_course"});
                table89.AddRow(new string[] {
                            "title",
                            "anil_vedubox_subject"});
#line 217
 testRunner.Given("instructor adds subject with", ((string)(null)), table89, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table90.AddRow(new string[] {
                            "course",
                            "anil_vedubox_course"});
                table90.AddRow(new string[] {
                            "title",
                            "anil_vedubox_course_content_as_embed_code_title"});
                table90.AddRow(new string[] {
                            "desc",
                            "anil_vedubox_course_content_as_embed_code_desc"});
                table90.AddRow(new string[] {
                            "embed_code",
                            "<iframe width=\"1280\" height=\"968\" src=\"https://www.youtube.com/embed/ZzBDAtbcFvM\"" +
                                "></iframe>"});
#line 221
 testRunner.Given("instructor adds content as embed code", ((string)(null)), table90, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table91.AddRow(new string[] {
                            "name",
                            "anil_vedubox_course"});
#line 227
 testRunner.Then("instructor delete course", ((string)(null)), table91, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("19_instructor_add_question_batch_question_from_excel")]
        public virtual void _19_İnstructor_Add_Question_Batch_Question_From_Excel()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("19_instructor_add_question_batch_question_from_excel", null, tagsOfScenario, argumentsOfScenario);
#line 231
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 232
 testRunner.Given("Open Kurumsal Login Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 233
 testRunner.Given("Login as \"instructor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table92.AddRow(new string[] {
                            "name",
                            "anil_vedubox_question_from_excel"});
#line 234
 testRunner.Given("instructor checks question is exist", ((string)(null)), table92, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table93.AddRow(new string[] {
                            "TestCategory",
                            "DefaultTestCategory1"});
#line 237
 testRunner.Given("instructor batch create question with", ((string)(null)), table93, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table94.AddRow(new string[] {
                            "name",
                            "anil_vedubox_question_from_excel"});
#line 240
 testRunner.Then("instructor deletes question with", ((string)(null)), table94, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("12_instructor_add_question_multiple_choice")]
        public virtual void _12_İnstructor_Add_Question_Multiple_Choice()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("12_instructor_add_question_multiple_choice", null, tagsOfScenario, argumentsOfScenario);
#line 244
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 245
 testRunner.Given("Open Kurumsal Login Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 246
 testRunner.Given("Login as \"instructor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table95.AddRow(new string[] {
                            "name",
                            "Soru - MULTIPLE CHOICE By ANIL"});
#line 247
 testRunner.Given("instructor checks question is exist", ((string)(null)), table95, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table96.AddRow(new string[] {
                            "question",
                            "Soru - MULTIPLE CHOICE By ANIL"});
                table96.AddRow(new string[] {
                            "point",
                            "25"});
                table96.AddRow(new string[] {
                            "choiceA",
                            "A Şıkkı"});
                table96.AddRow(new string[] {
                            "choiceB",
                            "B Şıkkı"});
                table96.AddRow(new string[] {
                            "choiceC",
                            "C Şıkkı"});
                table96.AddRow(new string[] {
                            "choiceD",
                            "D Şıkkı"});
                table96.AddRow(new string[] {
                            "TestCategory",
                            "DefaultTestCategory1"});
#line 250
 testRunner.Given("instructor adds multiple choice question with", ((string)(null)), table96, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table97.AddRow(new string[] {
                            "name",
                            "Soru - MULTIPLE CHOICE By ANIL"});
#line 259
 testRunner.Then("instructor deletes question with", ((string)(null)), table97, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("13_instructor_add_question_true_false")]
        public virtual void _13_İnstructor_Add_Question_True_False()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("13_instructor_add_question_true_false", null, tagsOfScenario, argumentsOfScenario);
#line 263
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 264
 testRunner.Given("Open Kurumsal Login Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 265
 testRunner.Given("Login as \"instructor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table98.AddRow(new string[] {
                            "name",
                            "Soru - TRUE FALSE By ANIL"});
#line 266
 testRunner.Given("instructor checks question is exist", ((string)(null)), table98, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table99.AddRow(new string[] {
                            "question",
                            "Soru - TRUE FALSE By ANIL"});
                table99.AddRow(new string[] {
                            "point",
                            "35"});
                table99.AddRow(new string[] {
                            "answer",
                            "False"});
                table99.AddRow(new string[] {
                            "TestCategory",
                            "DefaultTestCategory1"});
#line 269
 testRunner.Given("instructor adds true false question with", ((string)(null)), table99, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table100 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table100.AddRow(new string[] {
                            "name",
                            "Soru - TRUE FALSE By ANIL"});
#line 275
 testRunner.Then("instructor deletes question with", ((string)(null)), table100, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("14_instructor_add_question_open_ended")]
        public virtual void _14_İnstructor_Add_Question_Open_Ended()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("14_instructor_add_question_open_ended", null, tagsOfScenario, argumentsOfScenario);
#line 279
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 280
 testRunner.Given("Open Kurumsal Login Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 281
 testRunner.Given("Login as \"instructor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table101.AddRow(new string[] {
                            "name",
                            "Soru - open ended By ANIL"});
#line 282
 testRunner.Given("instructor checks question is exist", ((string)(null)), table101, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table102 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table102.AddRow(new string[] {
                            "question",
                            "Soru - open ended By ANIL"});
                table102.AddRow(new string[] {
                            "point",
                            "45"});
                table102.AddRow(new string[] {
                            "TestCategory",
                            "DefaultTestCategory1"});
#line 285
 testRunner.Given("instructor adds open_ended question with", ((string)(null)), table102, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table103 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table103.AddRow(new string[] {
                            "name",
                            "Soru - open ended By ANIL"});
#line 290
 testRunner.Then("instructor deletes question with", ((string)(null)), table103, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("20_instructor_add_test_pool_multiple_choice")]
        public virtual void _20_İnstructor_Add_Test_Pool_Multiple_Choice()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("20_instructor_add_test_pool_multiple_choice", null, tagsOfScenario, argumentsOfScenario);
#line 294
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 295
 testRunner.Given("Open Kurumsal Login Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 296
 testRunner.Given("Login as \"instructor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table104 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table104.AddRow(new string[] {
                            "name",
                            "anil_vedubox_test_pool_multiple_choice"});
#line 297
 testRunner.Given("instructor checks test poll question is exist", ((string)(null)), table104, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table105 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table105.AddRow(new string[] {
                            "name",
                            "anil_vedubox_test_pool_multiple_choice"});
                table105.AddRow(new string[] {
                            "time",
                            "45"});
                table105.AddRow(new string[] {
                            "TestCategory",
                            "DefaultTestCategory1"});
                table105.AddRow(new string[] {
                            "question",
                            "Default Multiple Choice Question1"});
#line 300
 testRunner.Given("instructor adds test pool multiple choice with", ((string)(null)), table105, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table106 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table106.AddRow(new string[] {
                            "name",
                            "anil_vedubox_test_pool_multiple_choice"});
#line 306
 testRunner.Given("instructor delete tests with", ((string)(null)), table106, "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("21_instructor_add_test_multiple_choice_adding_question_with_document")]
        public virtual void _21_İnstructor_Add_Test_Multiple_Choice_Adding_Question_With_Document()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("21_instructor_add_test_multiple_choice_adding_question_with_document", null, tagsOfScenario, argumentsOfScenario);
#line 310
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 311
 testRunner.Given("Open Kurumsal Login Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 312
 testRunner.Given("Login as \"instructor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table107.AddRow(new string[] {
                            "name",
                            "anil_vedubox_test_pool_multiple_choice_with_document"});
#line 313
 testRunner.Given("instructor checks test poll question is exist", ((string)(null)), table107, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table108 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table108.AddRow(new string[] {
                            "name",
                            "anil_vedubox_test_pool_multiple_choice_with_document"});
                table108.AddRow(new string[] {
                            "Duration",
                            "25"});
                table108.AddRow(new string[] {
                            "questionNumber",
                            "8"});
                table108.AddRow(new string[] {
                            "points",
                            "15"});
                table108.AddRow(new string[] {
                            "choicesNumber",
                            "4"});
                table108.AddRow(new string[] {
                            "firstAnswer",
                            "A"});
                table108.AddRow(new string[] {
                            "secondAnswer",
                            "B"});
                table108.AddRow(new string[] {
                            "thirdAnswer",
                            "C"});
                table108.AddRow(new string[] {
                            "fourthAnswer",
                            "D"});
                table108.AddRow(new string[] {
                            "fifthAnswer",
                            "A"});
                table108.AddRow(new string[] {
                            "sixthAnswer",
                            "B"});
                table108.AddRow(new string[] {
                            "seventhAnswer",
                            "C"});
                table108.AddRow(new string[] {
                            "eighthAnswer",
                            "D"});
                table108.AddRow(new string[] {
                            "TestCategory",
                            "DefaultTestCategory1"});
#line 316
 testRunner.Then("instructor adds test pool multiple choice with document", ((string)(null)), table108, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table109 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table109.AddRow(new string[] {
                            "name",
                            "anil_vedubox_test_pool_multiple_choice_with_document"});
#line 332
 testRunner.Given("instructor delete tests with", ((string)(null)), table109, "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("23_instructor_add_exam_multiple_choice")]
        public virtual void _23_İnstructor_Add_Exam_Multiple_Choice()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("23_instructor_add_exam_multiple_choice", null, tagsOfScenario, argumentsOfScenario);
#line 336
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 337
 testRunner.Given("Open Kurumsal Login Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 338
 testRunner.Given("Login as \"instructor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table110 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table110.AddRow(new string[] {
                            "name",
                            "anil_instructor_exam_multiple_choice"});
#line 339
 testRunner.Given("instructor checks exam is exist", ((string)(null)), table110, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table111 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table111.AddRow(new string[] {
                            "name",
                            "anil_instructor_exam_multiple_choice_name"});
                table111.AddRow(new string[] {
                            "description",
                            "anil_instructor_exam_multiple_choice_description"});
                table111.AddRow(new string[] {
                            "repeatNumber",
                            "3"});
                table111.AddRow(new string[] {
                            "catalogs",
                            "defaultKatalog1"});
                table111.AddRow(new string[] {
                            "tests",
                            "Default Multiple Choice Test1"});
#line 342
 testRunner.Then("instructor adds exam with multiple choice", ((string)(null)), table111, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table112 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table112.AddRow(new string[] {
                            "name",
                            "anil_instructor_exam_multiple_choice"});
#line 349
 testRunner.Given("instructor delete exam with", ((string)(null)), table112, "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("24_instructor_add_exam_multiple_choice_with_pdf")]
        public virtual void _24_İnstructor_Add_Exam_Multiple_Choice_With_Pdf()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("24_instructor_add_exam_multiple_choice_with_pdf", null, tagsOfScenario, argumentsOfScenario);
#line 353
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 354
 testRunner.Given("Open Kurumsal Login Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 355
 testRunner.Given("Login as \"instructor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table113 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table113.AddRow(new string[] {
                            "name",
                            "anil_instructor_exam_multiple_choice_with_pdf"});
#line 356
 testRunner.Given("instructor checks exam is exist", ((string)(null)), table113, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table114 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table114.AddRow(new string[] {
                            "name",
                            "anil_instructor_exam_multiple_choice_with_pdf_name"});
                table114.AddRow(new string[] {
                            "description",
                            "anil_instructor_exam_multiple_choice_with_pdf_description"});
                table114.AddRow(new string[] {
                            "repeatNumber",
                            "5"});
                table114.AddRow(new string[] {
                            "catalogs",
                            "defaultKatalog1"});
                table114.AddRow(new string[] {
                            "tests",
                            "Default Multiple Choice With Pdf Test1"});
#line 359
 testRunner.Then("instructor adds exam with multiple choice", ((string)(null)), table114, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table115 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table115.AddRow(new string[] {
                            "name",
                            "anil_instructor_exam_multiple_choice_with_pdf"});
#line 366
 testRunner.Given("instructor delete exam with", ((string)(null)), table115, "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("25_instructor_add_exam_open_ended")]
        public virtual void _25_İnstructor_Add_Exam_Open_Ended()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("25_instructor_add_exam_open_ended", null, tagsOfScenario, argumentsOfScenario);
#line 370
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 371
 testRunner.Given("Open Kurumsal Login Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 372
 testRunner.Given("Login as \"instructor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table116 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table116.AddRow(new string[] {
                            "name",
                            "anil_instructor_exam_open_ended"});
#line 373
 testRunner.Given("instructor checks exam is exist", ((string)(null)), table116, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table117 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table117.AddRow(new string[] {
                            "name",
                            "anil_instructor_exam_open_ended_name"});
                table117.AddRow(new string[] {
                            "description",
                            "anil_instructor_exam_open_ended_description"});
                table117.AddRow(new string[] {
                            "repeatNumber",
                            "2"});
                table117.AddRow(new string[] {
                            "catalogs",
                            "defaultKatalog1"});
                table117.AddRow(new string[] {
                            "tests",
                            "Default Open Ended Test1"});
#line 376
 testRunner.Then("instructor adds exam with open ended", ((string)(null)), table117, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table118 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table118.AddRow(new string[] {
                            "name",
                            "anil_instructor_exam_open_ended"});
#line 383
 testRunner.Given("instructor delete exam with", ((string)(null)), table118, "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("26_instructor_answers_Question_And_Answer")]
        public virtual void _26_İnstructor_Answers_Question_And_Answer()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("26_instructor_answers_Question_And_Answer", null, tagsOfScenario, argumentsOfScenario);
#line 387
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 391
 testRunner.Given("Open Kurumsal Login Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 392
 testRunner.Given("Login as \"student\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table119 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table119.AddRow(new string[] {
                            "courseName",
                            "defaultCourse2 (Anil Senocak)"});
                table119.AddRow(new string[] {
                            "subject",
                            "defaultQuestionAndAnswer"});
                table119.AddRow(new string[] {
                            "message",
                            "defaultQuestionAndAnswerMessage"});
#line 393
    testRunner.Given("student adds new Q&A", ((string)(null)), table119, "Given ");
#line hidden
#line 398
    testRunner.Given("Open Kurumsal Login Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 399
 testRunner.Given("Login as \"instructor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table120 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table120.AddRow(new string[] {
                            "answer",
                            "anil answer the question"});
#line 400
 testRunner.Then("instructor answers the question", ((string)(null)), table120, "Then ");
#line hidden
#line 403
 testRunner.Then("instructor deletes new Q&A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("22_instructor_add_test_poll_open_ended")]
        public virtual void _22_İnstructor_Add_Test_Poll_Open_Ended()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("22_instructor_add_test_poll_open_ended", null, tagsOfScenario, argumentsOfScenario);
#line 405
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 406
 testRunner.Given("Open Kurumsal Login Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 407
 testRunner.Given("Login as \"instructor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table121 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table121.AddRow(new string[] {
                            "name",
                            "anil_vedubox_test_pool_open_ended"});
#line 408
 testRunner.Given("instructor checks test poll question is exist", ((string)(null)), table121, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table122 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table122.AddRow(new string[] {
                            "name",
                            "anil_vedubox_test_pool_open_ended"});
                table122.AddRow(new string[] {
                            "time",
                            "45"});
                table122.AddRow(new string[] {
                            "TestCategory",
                            "DefaultTestCategory1"});
                table122.AddRow(new string[] {
                            "question",
                            "Default Open Ended Question1"});
#line 411
 testRunner.Given("instructor adds test pool open ended with", ((string)(null)), table122, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table123 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table123.AddRow(new string[] {
                            "name",
                            "anil_vedubox_test_pool_open_ended"});
#line 417
 testRunner.Given("instructor delete tests with", ((string)(null)), table123, "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("0_instructor_add_exam_with_default_params")]
        public virtual void _0_İnstructor_Add_Exam_With_Default_Params()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("0_instructor_add_exam_with_default_params", null, tagsOfScenario, argumentsOfScenario);
#line 421
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 422
 testRunner.Given("Open Kurumsal Login Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 423
 testRunner.Given("Login as \"instructor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table124 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table124.AddRow(new string[] {
                            "name",
                            "anil_instructor_exam"});
#line 424
 testRunner.Given("instructor checks exam is exist", ((string)(null)), table124, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table125 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table125.AddRow(new string[] {
                            "name",
                            "anil_instructor_exam_name"});
                table125.AddRow(new string[] {
                            "description",
                            "anil_instructor_exam_description"});
                table125.AddRow(new string[] {
                            "catalogs",
                            "defaultKatalog1,defaultKatalog2"});
                table125.AddRow(new string[] {
                            "tests",
                            "Default Multiple Choice Test1,Default True False Test1,Default Open Ended Test1"});
#line 427
 testRunner.Then("instructor adds exam with document", ((string)(null)), table125, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table126 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table126.AddRow(new string[] {
                            "name",
                            "anil_instructor_exam"});
#line 433
 testRunner.Given("instructor delete exam with", ((string)(null)), table126, "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
